version: '3.8'

services:
  postgres:
    restart: always
    image: postgres:14.2-alpine
    hostname: postgres
    container_name: postgres
    user: postgres
    expose:
      - 5432
    volumes:
      - postgres:/var/lib/postgresql/data/
    networks:
      - internal
    environment:
      - POSTGRES_DB=rekono
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
  
  redis:
    restart: always
    image: redis:6.2.6-alpine
    hostname: redis
    container_name: redis
    user: redis
    expose:
      - 6379
    networks:
      - internal
  
  postfix:
    restart: always
    image: catatnight/postfix:latest
    hostname: postfix
    container_name: postfix
    expose:
      - 25
    networks:
      - internal
      - external
    environment:
      - maildomain=rekono.com
      - smtp_user=postfix:postfix

  initialize:
    restart: 'no'
    image: rekono-backend:latest
    command: sh -c "python manage.py frontend && python manage.py migrate && python manage.py createsuperuser --no-input"
    container_name: initialize
    volumes:
      - rekono:/rekono
      - backend:/code
      - frontend:/code/frontend
      - ./config.yaml:/rekono/config.yaml:ro
    networks:
      - internal
    depends_on:
      - postgres
    environment:
      - RKN_DB_HOST=postgres
      - RKN_DB_USER=postgres
      - RKN_DB_PASSWORD=postgres
      - RKN_DD_URL
      - RKN_DD_API_KEY
      - REKONO_HOME=/rekono
      - DJANGO_SUPERUSER_EMAIL=${RKN_EMAIL:-rekono@rekono.com}
      - DJANGO_SUPERUSER_USERNAME=${RKN_USERNAME:-rekono}
      - DJANGO_SUPERUSER_PASSWORD=${RKN_PASSWORD:-rekono}
  
  tasks-worker:
    restart: always
    image: rekono-backend:latest
    command: python manage.py rqworker tasks-queue
    hostname: tasks-worker
    volumes:
      - rekono:/rekono
      - backend:/code
      - ./config.yaml:/rekono/config.yaml:ro
    networks:
      - internal
    depends_on:
      - postgres
      - redis
    environment:
      - RKN_DB_HOST=postgres
      - RKN_DB_USER=postgres
      - RKN_DB_PASSWORD=postgres
      - RKN_RQ_HOST=redis
      - REKONO_HOME=/rekono
      - OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

  executions-worker:
    restart: always
    build:
      context: .
      dockerfile: docker/kali/Dockerfile
    image: rekono-kali:latest
    command: python manage.py rqworker executions-queue
    hostname: executions-worker
    volumes:
      - rekono:/rekono
      - backend:/code
      - ./config.yaml:/rekono/config.yaml:ro
    networks:
      - internal
      - external
    cap_add:
      - NET_ADMIN
    depends_on:
      - postgres
      - redis
    environment:
      - RKN_DB_HOST=postgres
      - RKN_DB_USER=postgres
      - RKN_DB_PASSWORD=postgres
      - RKN_RQ_HOST=redis
      - REKONO_HOME=/rekono
      - OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

  findings-worker:
    restart: always
    image: rekono-backend:latest
    command: python manage.py rqworker findings-queue
    hostname: findings-worker
    volumes:
      - rekono:/rekono
      - backend:/code
      - ./config.yaml:/rekono/config.yaml:ro
    networks:
      - internal
      - external
    depends_on:
      - postgres
      - redis
    environment:
      - RKN_DB_HOST=postgres
      - RKN_DB_USER=postgres
      - RKN_DB_PASSWORD=postgres
      - RKN_RQ_HOST=redis
      - RKN_TELEGRAM_TOKEN
      - RKN_DD_URL
      - RKN_DD_API_KEY
      - REKONO_HOME=/rekono
      - OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
    
  emails-worker:
    restart: always
    image: rekono-backend:latest
    command: python manage.py rqworker emails-queue
    hostname: emails-worker
    volumes:
      - rekono:/rekono
      - backend:/code
      - ./config.yaml:/rekono/config.yaml:ro
    networks:
      - internal
      - external
    depends_on:
      - redis
      - postfix
    environment:
      - RKN_DB_HOST=postgres
      - RKN_DB_USER=postgres
      - RKN_DB_PASSWORD=postgres
      - RKN_RQ_HOST=redis
      - RKN_EMAIL_HOST=${RKN_EMAIL_HOST:-postfix}
      - RKN_EMAIL_PORT=${RKN_EMAIL_PORT:-25}
      - RKN_EMAIL_USER=${RKN_EMAIL_USER:-postfix}
      - RKN_EMAIL_PASSWORD=${RKN_EMAIL_PASSWORD:-postfix}
      - RKN_FRONTEND_URL=${RKN_FRONTEND_URL:-httpS://127.0.0.1}
      - REKONO_HOME=/rekono
      - OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

  telegram-bot:
    restart: on-failure
    image: rekono-backend:latest
    command: python manage.py telegram_bot
    hostname: telegram_bot
    container_name: telegram-bot
    volumes:
      - rekono:/rekono
      - backend:/code
      - ./config.yaml:/rekono/config.yaml:ro
    networks:
      - internal
      - external
    depends_on:
      - postgres
      - redis
    environment:
      - RKN_DB_HOST=postgres
      - RKN_DB_USER=postgres
      - RKN_DB_PASSWORD=postgres
      - RKN_RQ_HOST=redis
      - RKN_TELEGRAM_TOKEN
      - REKONO_HOME=/rekono
  
  backend:
    restart: always
    build:
      context: .
      dockerfile: docker/rekono/Dockerfile
      target: backend
    image: rekono-backend:latest
    command: python manage.py runserver 0.0.0.0:8000
    hostname: backend
    container_name: backend
    expose:
      - 8000
    volumes:
      - rekono:/rekono
      - backend:/code
      - ./config.yaml:/rekono/config.yaml:ro
    networks:
      - internal
      - external
    depends_on:
      - postgres
      - redis
    environment:
      - RKN_DB_HOST=postgres
      - RKN_DB_USER=postgres
      - RKN_DB_PASSWORD=postgres
      - RKN_RQ_HOST=redis
      - RKN_TRUSTED_PROXY=true
      - RKN_ALLOWED_HOSTS=*
      - RKN_DD_URL
      - RKN_DD_API_KEY
      - REKONO_HOME=/rekono
  
  frontend:
    restart: always
    build:
      context: .
      dockerfile: docker/rekono/Dockerfile
      target: frontend
    image: rekono-frontend:latest
    command: serve -s dist
    hostname: frontend
    container_name: frontend
    expose:
      - 3000
    volumes:
      - frontend:/frontend
    networks:
      - internal
    depends_on:
      - initialize
    environment:
      - NODE_OPTIONS=--openssl-legacy-provider

  nginx:
    restart: always
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    image: rekono-nginx:latest
    hostname: nginx
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    networks:
      - internal
      - external

volumes:
  postgres:
  rekono:
  backend:
  frontend:

networks:
  internal:
    internal: true
  external:
