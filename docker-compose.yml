version: '3.8'

services:
  postgres:
    restart: always
    image: postgres:14.2-alpine
    hostname: postgres
    user: postgres
    expose:
      - 5432
    volumes:
      - postgres:/var/lib/postgresql/data/
    networks:
      - internal
    environment:
      - POSTGRES_DB=rekono
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
  
  redis:
    restart: always
    image: redis:6.2.6-alpine
    hostname: redis
    user: redis
    expose:
      - 6379
    networks:
      - internal

  initialize:
    restart: 'no'
    image: flophype/scanback:latest
    command: sh -c "python manage.py migrate && python manage.py createsuperuser --no-input"
    volumes:
      - scanable:/rekono
    networks:
      - internal
    depends_on:
      - postgres
    environment:
      - RKN_DB_HOST=postgres
      - RKN_DB_USER=postgres
      - RKN_DB_PASSWORD=postgres
      - REKONO_HOME=/rekono
      - DJANGO_SUPERUSER_EMAIL=${RKN_EMAIL}
      - DJANGO_SUPERUSER_USERNAME=${RKN_USERNAME}
      - DJANGO_SUPERUSER_PASSWORD=${RKN_PASSWORD}
  
  tasks-worker:
    restart: always
    image: flophype/scanback:latest
    command: python manage.py rqworker tasks-queue
    hostname: tasks-worker
    volumes:
      - scanable:/rekono
    networks:
      - internal
    depends_on:
      - initialize
      - redis
    environment:
      - RKN_DB_HOST=postgres
      - RKN_DB_USER=postgres
      - RKN_DB_PASSWORD=postgres
      - RKN_RQ_HOST=redis
      - REKONO_HOME=/rekono
      - OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

  executions-worker:
    restart: always
    build:
      context: .
      dockerfile: docker/kali/Dockerfile
    image: flophype/scangine:latest
    command: python manage.py rqworker executions-queue
    hostname: executions-worker
    volumes:
      - scanable:/rekono
    networks:
      - internal
      - external
    cap_add:
      - NET_ADMIN
    depends_on:
      - initialize
      - redis
    environment:
      - RKN_DB_HOST=postgres
      - RKN_DB_USER=postgres
      - RKN_DB_PASSWORD=postgres
      - RKN_RQ_HOST=redis
      - REKONO_HOME=/rekono
      - OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

  findings-worker:
    restart: always
    image: flophype/scanback:latest
    command: python manage.py rqworker findings-queue
    hostname: findings-worker
    volumes:
      - scanable:/rekono
    networks:
      - internal
      - external
    depends_on:
      - initialize
      - redis
    environment:
      - RKN_DB_HOST=postgres
      - RKN_DB_USER=postgres
      - RKN_DB_PASSWORD=postgres
      - RKN_RQ_HOST=redis
      - REKONO_HOME=/rekono
      - OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
    
  emails-worker:
    restart: always
    image: flophype/scanback:latest
    command: python manage.py rqworker emails-queue
    hostname: emails-worker
    volumes:
      - scanable:/rekono
    networks:
      - internal
      - external
    depends_on:
      - initialize
      - redis
    environment:
      - RKN_DB_HOST=postgres
      - RKN_DB_USER=postgres
      - RKN_DB_PASSWORD=postgres
      - RKN_RQ_HOST=redis
      - RKN_FRONTEND_URL=${RKN_FRONTEND_URL:-httpS://127.0.0.1}
      - REKONO_HOME=/rekono
      - OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

  backend:
    restart: always
    build:
      context: .
      dockerfile: docker/rekono/Dockerfile
      target: backend
    image: flophype/scanback:latest
    command: python manage.py runserver 0.0.0.0:8000
    hostname: backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/schema/swagger-ui.html"]
      interval: 10s
      timeout: 5s
      retries: 10
    expose:
      - 8000
    volumes:
      - scanable:/rekono
    networks:
      - internal
      - external
    depends_on:
      - initialize
      - redis
    environment:
      - RKN_DB_HOST=postgres
      - RKN_DB_USER=postgres
      - RKN_DB_PASSWORD=postgres
      - RKN_RQ_HOST=redis
      - RKN_TRUSTED_PROXY=true
      - RKN_ALLOWED_HOSTS=*
      - REKONO_HOME=/rekono
  
  frontend:
    restart: always
    build:
      context: .
      dockerfile: docker/rekono/Dockerfile
      target: frontend
    image: flophype/scanfront:latest
    command: sh -c "serve -s dist"
    hostname: frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/#/login"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 30s
    expose:
      - 3000
    networks:
      - internal
    depends_on:
      - initialize
    environment:
      - NODE_OPTIONS=--openssl-legacy-provider

  nginx:
    restart: always
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    image: flophype/scanginx:latest
    hostname: nginx
    ports:
      - ${HTTPPORT}:80
      - ${HTTPSPORT}:443
    volumes:
      - /media/data/nginx.conf:/etc/nginx/nginx.conf
      - /home/josh/letsencrypt/archive/npm-5/:/etc/letsencrypt/keys:rw
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - internal
      - external

volumes:
  postgres:
  scanable:

networks:
  internal:
    internal: true
  external:
